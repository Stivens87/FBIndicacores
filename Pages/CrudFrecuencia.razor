@page "/frecuencia"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager



<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Frecuencias</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>

                    <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                        <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                    </button>

                        <button class="btn btn-success btn-sm" @onclick="AbrirModal">
                            <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                        </button>

                        <button class="btn btn-info btn-sm" @onclick="() => EditarFrecuenciaSeleccionado()">
                            <i class="material-icons">&#xE254;</i> <span>Editar Seleccionado</span>
                        </button>

                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (frecuencias == null || frecuencias.Count == 0)
            {
                <p>No hay Frecuencias disponibles.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>
                                <span class="custom-checkbox">
                                    <input type="checkbox" @bind="@seleccionarTodos">
                                    <label></label>
                                </span>
                            </th>
                            <th>id</th>
                            <th>nombre</th>                            
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var frecuencia in frecuencias)
                        {
                            <tr>
                                <td>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@frecuenciaSeleccionado[frecuencia]">
                                        <label></label>
                                    </span>
                                </td>
                                <td>@ObtenerValor(frecuencia, "id")</td>
                                <td>@ObtenerValor(frecuencia, "nombre")</td>                                
                                <td>
                                    <a href="#" class="edit" @onclick="() => EditarFrecuencia(frecuencia)" @onclick:preventDefault>
                                        <i class="material-icons" title="Editar">&#xE254;</i>
                                    </a>
                                <a href="#" class="delete" @onclick="() => EliminarFrecuencia(frecuencia)" @onclick:preventDefault>
                                    <i class="material-icons" title="Eliminar">&#xE872;</i>
                                </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModal)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="GuardarFrecuencia">
                    <div class="modal-header">
                        <h4 class="modal-title">Agregar Frecuencia</h4>
                        <button type="button" class="close" @onclick="CerrarModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Id</label>
                            <input type="number" class="form-contfrecuencia" @bind="idFrecuencia" disabled>
                        </div>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-contfrecuencia" @bind="nombreFrecuencia" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        <button type="submit" class="btn btn-success">Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Frecuencia</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Id del Frecuencia</label>
                        <input type="text" class="form-contfrecuencia" @bind="idFrecuenciaConsulta">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarFrecuencia">Buscar</button>

                    @if (frecuenciaConsultado != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-contfrecuencia" value="@nombreFrecuenciaConsulta" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ActualizarFrecuencia">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Frecuencia</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Id</label>
                            <input type="number" class="form-contfrecuencia" @bind="idFrecuenciaEditar" disabled>
                        </div>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-contfrecuencia" @bind="nombreFrecuenciaEditar" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarFrecuencia">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Frecuencia</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro(a) de que desea eliminar este frecuencia?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Frecuencias Seleccionados</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar las Frecuencias seleccionados?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}


@code {
    private List<Dictionary<string, object>> frecuencias = new List<Dictionary<string, object>>();
    private Dictionary<Dictionary<string, object>, bool> frecuenciaSeleccionado = new();
    private bool cargando = true;
    private string? errorMensaje = null;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var clave in frecuenciaSeleccionado.Keys.ToList())
            {
                frecuenciaSeleccionado[clave] = _seleccionarTodos;
            }
        }
    }
    private bool _seleccionarTodos = false;

    private bool mostrarModal = false;
    @* private string idFrecuencia = ""; *@
    private int idFrecuencia; // Added variable declaration
    private string nombreFrecuencia = "";    

// Variables para contfrecuenciaar el modal de consulta
private bool mostrarModalConsulta = false;
private string idFrecuenciaConsulta = "";

// Variables para mostrar los datos del frecuencia consultado
private Dictionary<string, object>? frecuenciaConsultado = null;
private string nombreFrecuenciaConsulta = "";


// Variables para el modal de edición
private bool mostrarModalEditar = false;
private Dictionary<string, object>? frecuenciaParaEditar = null;
private int idFrecuenciaEditar;
private string nombreFrecuenciaEditar = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarFrecuencias();
    }

    private async Task CargarFrecuencias()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync("proyecto", "frecuencia");
            frecuencias = resultado ?? new();
            frecuenciaSeleccionado = frecuencias.ToDictionary(p => p, p => false);
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar frecuencias: {ex.Message}";
            frecuencias = new();
        }
        finally
        {
            cargando = false;
        }
    }

    private void AbrirModal()
    {
        mostrarModal = true;
        nombreFrecuencia = "";
    }
    private void CerrarModal()
    {
        mostrarModal = false;
    }

private async Task GuardarFrecuencia()
{
    // Validar que los campos no estén vacíos
    if (string.IsNullOrEmpty(nombreFrecuencia))
    {
        errorMensaje = "El Nombre del frecuencia es obligatorio.";
        return;
    }
    // Crear el nuevo frecuencia
    var nuevoFrecuencia = new Dictionary<string, object>
    {             
        { "nombre", nombreFrecuencia },        
    };

    // 🔥 Llamar a la API para guardar en la base de datos
    bool resultado = await servicioEntidad.CrearAsync("proyecto", "frecuencia", nuevoFrecuencia);

    if (resultado)  // Si la API responde con éxito
    {
        @* frecuencias.Add(nuevoFrecuencia);  // Agregarlo a la lista local
        frecuenciaSeleccionado[nuevoFrecuencia] = false; *@
        await CargarFrecuencias();
        CerrarModal();
    }
    else
    {
        errorMensaje = "Error al guardar el frecuencia en la base de datos.";
    }
}

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }
    private async Task ConsultarFrecuencia()
{
    if (string.IsNullOrEmpty(idFrecuenciaConsulta))
    {
        errorMensaje = "Debe ingresar un código de frecuencia.";
        return;
    }

    var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "frecuencia", "id", idFrecuenciaConsulta);

    if (resultado != null)
    {
        frecuenciaConsultado = resultado;
        nombreFrecuenciaConsulta = ObtenerValor(resultado, "nombre");        
    }
    else
    {
        errorMensaje = "No se encontró el frecuencia.";
        frecuenciaConsultado = null;
        nombreFrecuenciaConsulta = "";        
    }
}
private void CerrarModalConsulta()
{
    mostrarModalConsulta = false;
    idFrecuenciaConsulta = "";
    frecuenciaConsultado = null;
    nombreFrecuenciaConsulta = "";    
}
private void EditarFrecuencia(Dictionary<string, object> frecuencia)
{
    frecuenciaParaEditar = frecuencia;
    
    // Cargar datos del frecuencia en el formulario de edición
    idFrecuenciaEditar = int.TryParse(ObtenerValor(frecuencia, "id"), out int id) ? id : 0; 
    nombreFrecuenciaEditar = ObtenerValor(frecuencia, "nombre");
    mostrarModalEditar = true;
}

private void CerrarModalEditar()
{
    mostrarModalEditar = false;
    frecuenciaParaEditar = null;
}

private async Task ActualizarFrecuencia()
{
    if (frecuenciaParaEditar == null || string.IsNullOrEmpty(nombreFrecuenciaEditar))
    {
        errorMensaje = "El nombre del frecuencia es obligatorio.";
        return;
    }

    var datosFrecuenciaActualizado = new Dictionary<string, object>
    {
        @* { "id", idFrecuenciaEditar }, *@
        { "nombre", nombreFrecuenciaEditar },        
    };

    // Actualizar el frecuencia en la base de datos
    bool resultado = await servicioEntidad.ActualizarAsync(
        "proyecto", 
        "frecuencia", 
        "id", 
        idFrecuenciaEditar.ToString(), 
        datosFrecuenciaActualizado);

    if (resultado)
    {
        // Actualizar el frecuencia en la lista local
        @* int indice = frecuencias.IndexOf(frecuenciaParaEditar);
        if (indice >= 0) *@
        
        
            @* frecuencias[indice] = datosFrecuenciaActualizado;
            frecuenciaSeleccionado.Remove(frecuenciaParaEditar);
            frecuenciaSeleccionado[datosFrecuenciaActualizado] = false; *@
            await CargarFrecuencias();
            CerrarModalEditar();
        
        @* CerrarModalEditar(); *@
    }
    else
    {
        errorMensaje = "Error al actualizar el tipo Actor en la base de datos.";
    }
}
private void EditarFrecuenciaSeleccionado()
{
    var seleccionado = frecuenciaSeleccionado.FirstOrDefault(x => x.Value).Key;
    if (seleccionado != null)
    {
        EditarFrecuencia(seleccionado);
    }
    else
    {
        errorMensaje = "Debe seleccionar un tipo Actor para editar.";
    }
}
// Variables para el modal de eliminación
private bool mostrarModalEliminar = false;
private Dictionary<string, object>? frecuenciaParaEliminar = null;

private void EliminarFrecuencia(Dictionary<string, object> frecuencia)
{
    frecuenciaParaEliminar = frecuencia;
    mostrarModalEliminar = true;
}

private void CerrarModalEliminar()
{
    mostrarModalEliminar = false;
    frecuenciaParaEliminar = null;
}

private async Task ConfirmarEliminarFrecuencia()
{
    if (frecuenciaParaEliminar != null)
    {
        string id = ObtenerValor(frecuenciaParaEliminar, "id");
        
        // Eliminar de la base de datos
        bool resultado = await servicioEntidad.EliminarAsync(
            "proyecto", 
            "frecuencia", 
            "id", 
            id);
            
        if (resultado)
        {
            // Eliminar de la lista local
            frecuencias.Remove(frecuenciaParaEliminar);
            frecuenciaSeleccionado.Remove(frecuenciaParaEliminar);
        }
        else
        {
            errorMensaje = "Error al eliminar el tipo Actor de la base de datos.";
        }
        
        CerrarModalEliminar();
    }
}
private async Task EliminarSeleccionados()
{
    var seleccionados = frecuenciaSeleccionado.Where(x => x.Value).Select(x => x.Key).ToList();
    
    foreach (var frecuencia in seleccionados)
    {
        string id = ObtenerValor(frecuencia, "id");
        bool resultado = await servicioEntidad.EliminarAsync(
            "proyecto", 
            "frecuencia", 
            "id", 
            id);
            
        if (resultado)
        {
            frecuencias.Remove(frecuencia);
            frecuenciaSeleccionado.Remove(frecuencia);
        }
    }
    
    seleccionarTodos = false;
}
// Variables para el modal de eliminación múltiple
private bool mostrarModalEliminarMultiples = false;

private void MostrarModalEliminarMultiples()
{
    // Verificar si hay frecuencias seleccionados
    var haySeleccionados = frecuenciaSeleccionado.Any(x => x.Value);
    if (!haySeleccionados)
    {
        errorMensaje = "Debe seleccionar al menos un frecuencia para eliminar.";
        return;
    }
    
    mostrarModalEliminarMultiples = true;
}

private void CerrarModalEliminarMultiples()
{
    mostrarModalEliminarMultiples = false;
}

private async Task ConfirmarEliminarSeleccionados()
{
    await EliminarSeleccionados();
    CerrarModalEliminarMultiples();
}
}
