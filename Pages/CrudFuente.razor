@page "/fuente"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager



<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Fuentes</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>

                    <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                        <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                    </button>

                        <button class="btn btn-success btn-sm" @onclick="AbrirModal">
                            <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                        </button>

                        <button class="btn btn-info btn-sm" @onclick="() => EditarFuenteSeleccionado()">
                            <i class="material-icons">&#xE254;</i> <span>Editar Seleccionado</span>
                        </button>

                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (fuentes == null || fuentes.Count == 0)
            {
                <p>No hay Fuentes disponibles.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>
                                <span class="custom-checkbox">
                                    <input type="checkbox" @bind="@seleccionarTodos">
                                    <label></label>
                                </span>
                            </th>
                            <th>id</th>
                            <th>nombre</th>                            
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var fuente in fuentes)
                        {
                            <tr>
                                <td>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@fuenteSeleccionado[fuente]">
                                        <label></label>
                                    </span>
                                </td>
                                <td>@ObtenerValor(fuente, "id")</td>
                                <td>@ObtenerValor(fuente, "nombre")</td>                                
                                <td>
                                    <a href="#" class="edit" @onclick="() => EditarFuente(fuente)" @onclick:preventDefault>
                                        <i class="material-icons" title="Editar">&#xE254;</i>
                                    </a>
                                <a href="#" class="delete" @onclick="() => EliminarFuente(fuente)" @onclick:preventDefault>
                                    <i class="material-icons" title="Eliminar">&#xE872;</i>
                                </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModal)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="GuardarFuente">
                    <div class="modal-header">
                        <h4 class="modal-title">Agregar Fuente</h4>
                        <button type="button" class="close" @onclick="CerrarModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Id</label>
                            <input type="number" class="form-control" @bind="idFuente" disabled>
                        </div>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" @bind="nombreFuente" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        <button type="submit" class="btn btn-success">Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Fuente</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Id del Fuente</label>
                        <input type="text" class="form-control" @bind="idFuenteConsulta">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarFuente">Buscar</button>

                    @if (fuenteConsultado != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" value="@nombreFuenteConsulta" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ActualizarFuente">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Fuente</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Id</label>
                            <input type="number" class="form-control" @bind="idFuenteEditar" disabled>
                        </div>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" @bind="nombreFuenteEditar" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarFuente">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Fuente</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro(a) de que desea eliminar este fuente?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Fuentes Seleccionados</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar las Fuentes seleccionados?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}


@code {
    private List<Dictionary<string, object>> fuentes = new List<Dictionary<string, object>>();
    private Dictionary<Dictionary<string, object>, bool> fuenteSeleccionado = new();
    private bool cargando = true;
    private string? errorMensaje = null;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var clave in fuenteSeleccionado.Keys.ToList())
            {
                fuenteSeleccionado[clave] = _seleccionarTodos;
            }
        }
    }
    private bool _seleccionarTodos = false;

    private bool mostrarModal = false;
    @* private string idFuente = ""; *@
    private int idFuente; // Added variable declaration
    private string nombreFuente = "";    

// Variables para controlar el modal de consulta
private bool mostrarModalConsulta = false;
private string idFuenteConsulta = "";

// Variables para mostrar los datos del fuente consultado
private Dictionary<string, object>? fuenteConsultado = null;
private string nombreFuenteConsulta = "";


// Variables para el modal de edición
private bool mostrarModalEditar = false;
private Dictionary<string, object>? fuenteParaEditar = null;
private int idFuenteEditar;
private string nombreFuenteEditar = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarFuentes();
    }

    private async Task CargarFuentes()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync("proyecto", "fuente");
            fuentes = resultado ?? new();
            fuenteSeleccionado = fuentes.ToDictionary(p => p, p => false);
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar fuentes: {ex.Message}";
            fuentes = new();
        }
        finally
        {
            cargando = false;
        }
    }

    private void AbrirModal()
    {
        mostrarModal = true;
        nombreFuente = "";
    }
    private void CerrarModal()
    {
        mostrarModal = false;
    }

private async Task GuardarFuente()
{
    // Validar que los campos no estén vacíos
    if (string.IsNullOrEmpty(nombreFuente))
    {
        errorMensaje = "El Nombre del fuente es obligatorio.";
        return;
    }
    // Crear el nuevo fuente
    var nuevoFuente = new Dictionary<string, object>
    {             
        { "nombre", nombreFuente },        
    };

    // 🔥 Llamar a la API para guardar en la base de datos
    bool resultado = await servicioEntidad.CrearAsync("proyecto", "fuente", nuevoFuente);

    if (resultado)  // Si la API responde con éxito
    {
        @* fuentes.Add(nuevoFuente);  // Agregarlo a la lista local
        fuenteSeleccionado[nuevoFuente] = false; *@
        await CargarFuentes();
        CerrarModal();
    }
    else
    {
        errorMensaje = "Error al guardar el fuente en la base de datos.";
    }
}

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }
    private async Task ConsultarFuente()
{
    if (string.IsNullOrEmpty(idFuenteConsulta))
    {
        errorMensaje = "Debe ingresar un código de fuente.";
        return;
    }

    var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "fuente", "id", idFuenteConsulta);

    if (resultado != null)
    {
        fuenteConsultado = resultado;
        nombreFuenteConsulta = ObtenerValor(resultado, "nombre");        
    }
    else
    {
        errorMensaje = "No se encontró el fuente.";
        fuenteConsultado = null;
        nombreFuenteConsulta = "";        
    }
}
private void CerrarModalConsulta()
{
    mostrarModalConsulta = false;
    idFuenteConsulta = "";
    fuenteConsultado = null;
    nombreFuenteConsulta = "";    
}
private void EditarFuente(Dictionary<string, object> fuente)
{
    fuenteParaEditar = fuente;
    
    // Cargar datos del fuente en el formulario de edición
    idFuenteEditar = int.TryParse(ObtenerValor(fuente, "id"), out int id) ? id : 0; 
    nombreFuenteEditar = ObtenerValor(fuente, "nombre");
    mostrarModalEditar = true;
}

private void CerrarModalEditar()
{
    mostrarModalEditar = false;
    fuenteParaEditar = null;
}

private async Task ActualizarFuente()
{
    if (fuenteParaEditar == null || string.IsNullOrEmpty(nombreFuenteEditar))
    {
        errorMensaje = "El nombre del fuente es obligatorio.";
        return;
    }

    var datosFuenteActualizado = new Dictionary<string, object>
    {
        @* { "id", idFuenteEditar }, *@
        { "nombre", nombreFuenteEditar },        
    };

    // Actualizar el fuente en la base de datos
    bool resultado = await servicioEntidad.ActualizarAsync(
        "proyecto", 
        "fuente", 
        "id", 
        idFuenteEditar.ToString(), 
        datosFuenteActualizado);

    if (resultado)
    {
        // Actualizar el fuente en la lista local
        @* int indice = fuentes.IndexOf(fuenteParaEditar);
        if (indice >= 0) *@
        
        
            @* fuentes[indice] = datosFuenteActualizado;
            fuenteSeleccionado.Remove(fuenteParaEditar);
            fuenteSeleccionado[datosFuenteActualizado] = false; *@
            await CargarFuentes();
            CerrarModalEditar();
        
        @* CerrarModalEditar(); *@
    }
    else
    {
        errorMensaje = "Error al actualizar el tipo Actor en la base de datos.";
    }
}
private void EditarFuenteSeleccionado()
{
    var seleccionado = fuenteSeleccionado.FirstOrDefault(x => x.Value).Key;
    if (seleccionado != null)
    {
        EditarFuente(seleccionado);
    }
    else
    {
        errorMensaje = "Debe seleccionar un tipo Actor para editar.";
    }
}
// Variables para el modal de eliminación
private bool mostrarModalEliminar = false;
private Dictionary<string, object>? fuenteParaEliminar = null;

private void EliminarFuente(Dictionary<string, object> fuente)
{
    fuenteParaEliminar = fuente;
    mostrarModalEliminar = true;
}

private void CerrarModalEliminar()
{
    mostrarModalEliminar = false;
    fuenteParaEliminar = null;
}

private async Task ConfirmarEliminarFuente()
{
    if (fuenteParaEliminar != null)
    {
        string id = ObtenerValor(fuenteParaEliminar, "id");
        
        // Eliminar de la base de datos
        bool resultado = await servicioEntidad.EliminarAsync(
            "proyecto", 
            "fuente", 
            "id", 
            id);
            
        if (resultado)
        {
            // Eliminar de la lista local
            fuentes.Remove(fuenteParaEliminar);
            fuenteSeleccionado.Remove(fuenteParaEliminar);
        }
        else
        {
            errorMensaje = "Error al eliminar el tipo Actor de la base de datos.";
        }
        
        CerrarModalEliminar();
    }
}
private async Task EliminarSeleccionados()
{
    var seleccionados = fuenteSeleccionado.Where(x => x.Value).Select(x => x.Key).ToList();
    
    foreach (var fuente in seleccionados)
    {
        string id = ObtenerValor(fuente, "id");
        bool resultado = await servicioEntidad.EliminarAsync(
            "proyecto", 
            "fuente", 
            "id", 
            id);
            
        if (resultado)
        {
            fuentes.Remove(fuente);
            fuenteSeleccionado.Remove(fuente);
        }
    }
    
    seleccionarTodos = false;
}
// Variables para el modal de eliminación múltiple
private bool mostrarModalEliminarMultiples = false;

private void MostrarModalEliminarMultiples()
{
    // Verificar si hay fuentes seleccionados
    var haySeleccionados = fuenteSeleccionado.Any(x => x.Value);
    if (!haySeleccionados)
    {
        errorMensaje = "Debe seleccionar al menos un fuente para eliminar.";
        return;
    }
    
    mostrarModalEliminarMultiples = true;
}

private void CerrarModalEliminarMultiples()
{
    mostrarModalEliminarMultiples = false;
}

private async Task ConfirmarEliminarSeleccionados()
{
    await EliminarSeleccionados();
    CerrarModalEliminarMultiples();
}
}
