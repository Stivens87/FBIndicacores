@page "/indicadores"
@using System.Collections.Generic
@using System.Threading.Tasks
@using FBindicadores.Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<div class="container-xl">
  <div class="table-responsive">
    <div class="table-wrapper">
      <div class="table-title">
        <div class="row">
          <div class="col-sm-6">
            <h2>Administrar <b>Indicadores</b></h2>
          </div>
          <div class="col-sm-6 text-end">
            <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
              <i class="material-icons">&#xE8B6;</i><span>Consultar</span>
            </button>
            <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
              <i class="material-icons">&#xE15C;</i><span>Eliminar</span>
            </button>
            <button class="btn btn-success btn-sm" @onclick="AbrirModal">
              <i class="material-icons">&#xE147;</i><span>Agregar</span>
            </button>
            <button class="btn btn-info btn-sm" @onclick="EditarIndicadorSeleccionado">
              <i class="material-icons">&#xE254;</i><span>Editar Seleccionado</span>
            </button>
          </div>
        </div>
      </div>

      @if (cargando)
      {
        <p><em>Cargando...</em></p>
      }
      else if (indicadores == null || indicadores.Count == 0)
      {
        <p>No hay indicadores disponibles.</p>
      }
      else
      {
        <table class="table table-striped table-hover">
          <thead>
            <tr>
              <th>
                <span class="custom-checkbox">
                  <input type="checkbox" @bind="seleccionarTodos" />
                  <label></label>
                </span>
              </th>
              <th>Id</th>
              <th>Código</th>
              <th>Nombre</th>
              <th>Objetivo</th>
              <th>Alcance</th>
              <th>Fórmula</th>
              <th>Tipo Indicador</th>
              <th>Unidad Medición</th>
              <th>Meta</th>
              <th>Sentido</th>
              <th>Frecuencia</th>
              <th>Articulo</th>
              <th>Literal</th>
              <th>Númeral</th>
              <th>Paragrafo</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var indicador in indicadores)
            {
              <tr>
                <td>
                  <span class="custom-checkbox">
                    <input type="checkbox" @bind="indicadorSeleccionado[indicador]" />
                    <label></label>
                  </span>
                </td>
                <td>@ObtenerValor(indicador, "id")</td>
                <td>@ObtenerValor(indicador, "codigo")</td>
                <td>@ObtenerValor(indicador, "nombre")</td>
                <td>@ObtenerValor(indicador, "objetivo")</td>
                <td>@ObtenerValor(indicador, "alcance")</td>
                <td>@ObtenerValor(indicador, "formula")</td>
                <td>@ObtenerValor(indicador, "fkidtipoindicador")</td>
                <td>@ObtenerValor(indicador, "fkidunidadmedicion")</td>
                <td>@ObtenerValor(indicador, "meta")</td>
                <td>@ObtenerValor(indicador, "fkidsentido")</td>
                <td>@ObtenerValor(indicador, "fkidfrecuencia")</td>
                <td>@ObtenerValor(indicador, "fkidarticulo")</td>
                <td>@ObtenerValor(indicador, "fkidliteral")</td>
                <td>@ObtenerValor(indicador, "fkidnumeral")</td>
                <td>@ObtenerValor(indicador, "fkidparagrafo")</td>
                <td>
                  <a href="#" class="edit" @onclick="() => EditarIndicador(indicador)" @onclick:preventDefault>
                    <i class="material-icons" title="Editar">&#xE254;</i>
                  </a>
                  <a href="#" class="delete" @onclick="() => EliminarIndicador(indicador)" @onclick:preventDefault>
                    <i class="material-icons" title="Eliminar">&#xE872;</i>
                  </a>
                </td>
              </tr>
            }
          </tbody>
        </table>
      }
    </div>
  </div>
</div>

<!-- Modal Agregar Indicador -->
@if (mostrarModalAgregar)
{
  <div class="modal fade show d-block" style="background: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
      <div class="modal-content">
        <form @onsubmit="GuardarIndicador">
          <div class="modal-header">
            <h4 class="modal-title">Agregar Indicador</h4>
            <button type="button" class="close" @onclick="CerrarModal">&times;</button>
          </div>
          <div class="modal-body" >
            @* Campos *@
            <div class="form-group"><label>Código</label><input class="form-control" @bind="codigoIndicador" required />
            </div>
            <div class="form-group"><label>Nombre</label><input class="form-control" @bind="nombreIndicador" required />
            </div>
            <div class="form-group"><label>Objetivo</label><textarea class="form-control"
                @bind="objetivoIndicador"></textarea></div>
            <div class="form-group"><label>Alcance</label><textarea class="form-control"
                @bind="alcanceIndicador"></textarea></div>
            <div class="form-group"><label>Fórmula</label><input class="form-control" @bind="formulaIndicador" /></div>
            <div class="form-group">
              <label>Tipo Indicador</label>
              <select class="form-control" @bind="tipoIndicador">
                <option value="" disabled> Seleccione un Tipo Indicador</option>
                @foreach (var i in tipoIndicadores)
                {
                  <option value="@ObtenerValor(i,"id")">@ObtenerValor(i,"id")</option>
                }
              </select>
            </div>
            <div class="form-group">
              <label>Unidad Medición</label>
              <select class="form-control" @bind="unidadMedicion">
                <option value="" disabled> Seleccione Unidad Medición</option>
                @foreach (var u in unidadMediciones)
                {
                  <option value="@ObtenerValor(u,"id")">@ObtenerValor(u,"id")</option>
                }
              </select>
            </div>
            <div class="form-group"><label>Meta</label><input class="form-control" @bind="metaIndicador" /></div>
            <div class="form-group">
              <label>Sentido</label>
              <select class="form-control" @bind="sentidoIndicador">
                <option value="" disabled> Seleccione Sentido</option>
                @foreach (var s in sentidos)
                {
                  <option value="@ObtenerValor(s,"id")">@ObtenerValor(s,"id")</option>
                }
              </select>
            </div>
            <div class="form-group">
              <label>Frecuencia</label>
              <select class="form-control" @bind="frecuenciaIndicador">
                <option value="" disabled> Seleccione Frecuencia</option>
                @foreach (var f in frecuenciaIndicadores)
                {
                  <option value="@ObtenerValor(f,"id")">@ObtenerValor(f,"id")</option>
                }
              </select>
            </div>
            <div class="form-group">
              <label>Articulo</label>
              <select class="form-control" @bind="articuloIndicador">
                <option value="" disabled> Seleccione Articulo</option>
                @foreach (var a in articuloIndicadores)
                {
                  <option value="@ObtenerValor(a,"id")">@ObtenerValor(a,"id")</option>
                }
              </select>
            </div>
            <div class="form-group">
              <label>Literal</label>
              <select class="form-control" @bind="literalIndicador">
                <option value="" disabled> Seleccione Literal</option>
                @foreach (var l in literalIndicadores)
                {
                  <option value="@ObtenerValor(l,"id")">@ObtenerValor(l,"id")</option>
                }
              </select>
            </div>
            <div class="form-group">
              <label>Numeral</label>
              <select class="form-control" @bind="numeralIndicador">
                <option value="" disabled> Seleccione Numeral</option>
                @foreach (var n in numeralIndicadores)
                {
                  <option value="@ObtenerValor(n,"id")">@ObtenerValor(n,"id")</option>
                }
              </select>
            </div>
            <div class="form-group">
              <label>Paragrafo</label>
              <select class="form-control" @bind="paragrafoIndicador">
                <option value="" disabled> Seleccione Paragrafo</option>
                @foreach (var p in paragrafoIndicadores)
                {
                  <option value="@ObtenerValor(p,"id")">@ObtenerValor(p,"id")</option>
                }
              </select>
            </div>
    @* Nuevos datos para tablas intermedias*@
  <div class="form-group">
  <label>Fuentes</label>
  <select class="form-control" multiple onchange="@OnFuentesChanged">  
    @foreach (var f in fuentes)
    {
      <option value="@ObtenerValor(f, "id")"
              selected="@fuentesSeleccionadas.Contains(ObtenerValor(f, "id"))">
        @ObtenerValor(f, "nombre")
      </option>
    }
  </select>
</div>

<div class="form-group">
  <label>Responsables</label>
  <select class="form-control" multiple onchange="@OnResponsablesChanged">
    @foreach (var r in responsables)
    {
      <option value="@ObtenerValor(r, "id")"
              selected="@responsablesSeleccionados.Contains(ObtenerValor(r, "id"))">
        @ObtenerValor(r, "nombre")
      </option>
    }
  </select>
</div>

<div class="form-group">
  <label>Variables</label>
  <select class="form-control" multiple onchange="@OnVariablesChanged">
    @foreach (var v in variables)
    {
      <option value="@ObtenerValor(v, "id")"
              selected="@variablesSeleccionadas.Contains(ObtenerValor(v, "id"))">
        @ObtenerValor(v, "nombre")
      </option>
    }
  </select>
</div>

<div class="form-group">
  <label>Visuales</label>
  <select class="form-control" multiple onchange="@OnVisualesChanged">
    @foreach (var vis in visuales)
    {
      <option value="@ObtenerValor(vis, "id")"
              selected="@visualesSeleccionados.Contains(ObtenerValor(vis, "id"))">
        @ObtenerValor(vis, "nombre")
      </option>
    }
  </select>
</div>
          @*FIN De Datos nuevos*@
            @if (!string.IsNullOrEmpty(errorMensaje))
            {
              <div class="alert alert-danger">@errorMensaje</div>
            }
          </div>
          <div class="modal-footer">
            <button type="submit" class="btn btn-success">Guardar Indicador</button>
            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
            
          </div>
        </form>
      </div>
    </div>
  </div>
}

<!-- Modal Consultar Indicador -->
@if (mostrarModalConsulta)
{
  <div class="modal fade show d-block" style="background: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h4 class="modal-title">Consultar Indicador</h4>
          <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <label>Id de Indicador</label>
            <input class="form-control" @bind="idIndicadorConsulta" />
          </div>
          <button class="btn btn-primary mt-2" @onclick="ConsultarIndicador">Buscar</button>
          @* @if (indicadorConsultado != null)
          {
            <hr />
            @*Bloque para mostrar Indicador
            @if (tipoIndicadorConsultado != null && tipoIndicadorConsultado.Count > 0)
            {
              <hr />
              <h5>Responsables por Indicador</h5>
              <ul class="list-group">
                @foreach (var tipoIndicador in tipoIndicadorConsultado)
                {
                  <li class="list-group-item">
                    Id: @ObtenerValor(tipoIndicador, "fkidresponsable"),
                    Fecha: @ObtenerValor(tipoIndicador, "fechaasignacion"),
                  </li>
                }
              </ul>
            } *@
            <div class="form-group"><label>Código</label><input class="form-control" value="@codigoIndicadorConsulta"
                disabled /></div>
            <div class="form-group"><label>Nombre</label><input class="form-control" value="@nombreIndicadorConsulta"
                disabled /></div>
            <div class="form-group"><label>Objetivo</label><textarea class="form-control"
                disabled>@objetivoIndicadorConsulta</textarea></div>
            <div class="form-group"><label>Alcance</label><textarea class="form-control"
                disabled>@alcanceIndicadorConsulta</textarea></div>
            <div class="form-group"><label>Fórmula</label><input class="form-control" value="@formulaIndicadorConsulta"
                disabled /></div>
            <div class="form-group"><label>Tipo Indicador</label><input type="number" class="form-control"
                value="@tipoIndicadorConsulta" disabled /></div>
            <div class="form-group"><label>Unidad Medición</label><input type="number" class="form-control"
                value="@unidadMedicionConsulta" disabled /></div>
            <div class="form-group"><label>Meta</label><input class="form-control" value="@metaIndicadorConsulta"
                disabled /></div>
            <div class="form-group"><label>Sentido</label><input type="number" class="form-control"
                value="@sentidoIndicadorConsulta" disabled /></div>
            <div class="form-group"><label>Frecuencia</label><input type="number" class="form-control"
                value="@frecuenciaIndicadorConsulta" disabled /></div>
            <div class="form-group"><label>Articulo</label><input class="form-control" value="@articuloIndicadorConsulta"
                disabled /></div>
            <div class="form-group"><label>Literal</label><input class="form-control" value="@literalIndicadorConsulta"
                disabled /></div>
            <div class="form-group"><label>Númeral</label><input class="form-control" value="@numeralIndicadorConsulta"
                disabled /></div>
            <div class="form-group"><label>Paragrafo</label><input class="form-control" value="@paragrafoIndicadorConsulta"
                disabled /></div>          
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
        </div>
      </div>
    </div>
  </div>
}

<!-- Modal Editar Indicador -->
@if (mostrarModalEditar)
{
  <div class="modal fade show d-block" style="background: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
      <div class="modal-content">
        <form @onsubmit="ActualizarIndicador">
          <div class="modal-header">
            <h4 class="modal-title">Editar Indicador</h4>
            <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
          </div>
          <div class="modal-body">
            <div class="form-group"><label>Id</label><input type="number" class="form-control" @bind="idIndicadorEditar"
                disabled /></div>
            <div class="form-group"><label>Código</label><input class="form-control" @bind="codigoIndicadorEditar" />
            </div>
            <div class="form-group"><label>Nombre</label><input class="form-control" @bind="nombreIndicadorEditar"
                required /></div>
            <div class="form-group"><label>Objetivo</label><textarea class="form-control"
                @bind="objetivoIndicadorEditar"></textarea></div>
            <div class="form-group"><label>Alcance</label><textarea class="form-control"
                @bind="alcanceIndicadorEditar"></textarea></div>
            <div class="form-group"><label>Fórmula</label><input class="form-control" @bind="formulaIndicadorEditar" />
            </div>
            <div class="form-group">
                <label>Tipo Indicador</label>
                  <select class="form-control" @bind="tipoIndicador">
                    <option value="" disabled> Seleccione un Tipo Indicador</option>
                    @foreach (var i in tipoIndicadores)
                    {
                      <option value="@ObtenerValor(i, "id")">@ObtenerValor(i, "id")</option>
                    }
                  </select>
            </div>
            <div class="form-group">
            <label>Unidad Medición</label>
              <select class="form-control" @bind="unidadMedicion">
                <option value="" disabled> Seleccione Unidad Medición</option>
                @foreach (var u in unidadMediciones)
                {
                  <option value="@ObtenerValor(u,"id")">@ObtenerValor(u,"id")</option>
                }
              </select>
            </div>
            <div class="form-group"><label>Meta</label><input class="form-control" @bind="metaIndicadorEditar" /></div>
            <div class="form-group">
            <label>Sentido</label>
              <select class="form-control" @bind="sentidoIndicador">
                <option value="" disabled> Seleccione Sentido</option>
                @foreach (var s in sentidos)
                {
                  <option value="@ObtenerValor(s,"id")">@ObtenerValor(s,"id")</option>
                }
              </select>
            </div>
            <div class="form-group">
            <label>Frecuencia</label>
              <select class="form-control" @bind="frecuenciaIndicador">
                <option value="" disabled> Seleccione Frecuencia</option>
                @foreach (var f in frecuenciaIndicadores)
                {
                  <option value="@ObtenerValor(f,"id")">@ObtenerValor(f,"id")</option>
                }
              </select>
            </div>
            <div class="form-group">
            <label>Articulo</label>
              <select class="form-control" @bind="articuloIndicador">
                <option value="" disabled> Seleccione Articulo</option>
                @foreach (var a in articuloIndicadores)
                {
                  <option value="@ObtenerValor(a,"id")">@ObtenerValor(a,"id")</option>
                }
              </select>
            </div>
            <div class="form-group">
            <label>Literal</label>
              <select class="form-control" @bind="literalIndicador">
                <option value="" disabled> Seleccione Literal</option>
                @foreach (var l in literalIndicadores)
                {
                  <option value="@ObtenerValor(l,"id")">@ObtenerValor(l,"id")</option>
                }
              </select>
            </div>
            <div class="form-group">
            <label>Númeral</label>
              <select class="form-control" @bind="numeralIndicador">
                <option value="" disabled> Seleccione Numeral</option>
                @foreach (var n in numeralIndicadores)
                {
                  <option value="@ObtenerValor(n,"id")">@ObtenerValor(n,"id")</option>
                }
              </select>
            </div>
            <div class="form-group">
            <label>Paragrafo</label>
              <select class="form-control" @bind="paragrafoIndicador">
                <option value="" disabled> Seleccione Paragrafo</option>
                @foreach (var p in paragrafoIndicadores)
                {
                  <option value="@ObtenerValor(p,"id")">@ObtenerValor(p,"id")</option>
                }
              </select>
            </div>
            
                @* Nuevos datos para tablas intermedias*@
    <div class="form-group">
  <label>Fuentes</label>
  <select class="form-control" multiple onchange="@OnFuentesChanged">
    @foreach (var f in fuentes)
    {
      <option value="@ObtenerValor(f, "id")"
              selected="@fuentesSeleccionadas.Contains(ObtenerValor(f, "id"))">
        @ObtenerValor(f, "nombre")
      </option>
    }
  </select>
</div>

<div class="form-group">
  <label>Responsables</label>
  <select class="form-control" multiple onchange="@OnResponsablesChanged">
    @foreach (var r in responsables)
    {
      <option value="@ObtenerValor(r, "id")"
              selected="@responsablesSeleccionados.Contains(ObtenerValor(r, "id"))">
        @ObtenerValor(r, "nombre")
      </option>
    }
  </select>
</div>

<div class="form-group">
  <label>Variables</label>
  <select class="form-control" multiple onchange="@OnVariablesChanged">
    @foreach (var v in variables)
    {
      <option value="@ObtenerValor(v, "id")"
              selected="@variablesSeleccionadas.Contains(ObtenerValor(v, "id"))">
        @ObtenerValor(v, "nombre")
      </option>
    }
  </select>
</div>

<div class="form-group">
  <label>Visuales</label>
  <select class="form-control" multiple onchange="@OnVisualesChanged">
    @foreach (var vis in visuales)
    {
      <option value="@ObtenerValor(vis, "id")"
              selected="@visualesSeleccionados.Contains(ObtenerValor(vis, "id"))">
        @ObtenerValor(vis, "nombre")
      </option>
    }
  </select>
</div>
@*FIN DATOS*@           
            @if (!string.IsNullOrEmpty(errorMensaje))
            {
              <div class="alert alert-danger">@errorMensaje</div>
            }
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
            <button type="submit" class="btn btn-info">Actualizar</button>
          </div>
        </form>
      </div>
    </div>
  </div>
}

<!-- Modal Eliminar Indicador -->
@if (mostrarModalEliminar)
{
  <div class="modal fade show d-block" style="background: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
      <div class="modal-content">
        <form @onsubmit="ConfirmarEliminarIndicador">
          <div class="modal-header">
            <h4 class="modal-title">Eliminar Indicador</h4>
            <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
          </div>
          <div class="modal-body">
            <p>¿Está seguro de que desea eliminar este indicador?</p>
            <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
            <button type="submit" class="btn btn-danger">Eliminar</button>
          </div>
        </form>
      </div>
    </div>
  </div>
}

<!-- Modal Eliminar Múltiples Indicadores -->
@if (mostrarModalEliminarMultiples)
{
  <div class="modal fade show d-block" style="background: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
      <div class="modal-content">
        <form @onsubmit="ConfirmarEliminarSeleccionados">
          <div class="modal-header">
            <h4 class="modal-title">Eliminar Indicadores Seleccionados</h4>
            <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
          </div>
          <div class="modal-body">
            <p>¿Está seguro de que desea eliminar los indicadores seleccionados?</p>
            <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminarMultiples">Cancelar</button>
            <button type="submit" class="btn btn-danger">Eliminar</button>
          </div>
        </form>
      </div>
    </div>
  </div>
}

@code {
  private List<Dictionary<string, object>> indicadores = new();
  private Dictionary<Dictionary<string, object>, bool> indicadorSeleccionado = new();
  private List<Dictionary<string, object>> tipoIndicadores = new();
  private List<Dictionary<string, object>> frecuenciaIndicadores = new();
  private List<Dictionary<string, object>> unidadMediciones = new();
  private List<Dictionary<string, object>> sentidos = new();
  private List<Dictionary<string, object>> articuloIndicadores = new();
  private List<Dictionary<string, object>> literalIndicadores = new();
  private List<Dictionary<string, object>> numeralIndicadores = new();
  private List<Dictionary<string, object>> paragrafoIndicadores = new();

  // NUEVOS catálogos para relaciones
  private List<Dictionary<string, object>> fuentes = new();
  private List<Dictionary<string, object>> responsables = new();
  private List<Dictionary<string, object>> variables = new();
  private List<Dictionary<string, object>> visuales = new();
  private string currentUserEmail = "admin@empresa.com";
  // Selecciones MÚLTIPLES
  private List<string> fuentesSeleccionadas = new();
  private List<string> responsablesSeleccionados = new();
  private List<string> variablesSeleccionadas = new();
  private List<string> visualesSeleccionados = new();

  private bool cargando = true;
  private string? errorMensaje;

  private bool seleccionarTodos
  {
    get => _seleccionarTodos;
    set
    {
      _seleccionarTodos = value;
      foreach (var k in indicadorSeleccionado.Keys.ToList())
        indicadorSeleccionado[k] = value;
    }
  }
  private bool _seleccionarTodos = false;

// Controles de visibilidad de modales...
  private bool mostrarModalAgregar = false;
  private bool mostrarModalConsulta = false;
  private bool mostrarModalEditar = false;
  private bool mostrarModalEliminar = false;
  private bool mostrarModalEliminarMultiples = false;

  // Campos Agregar
  private string idIndicador = "";
  private string codigoIndicador = "";
  private string nombreIndicador = "";
  private string objetivoIndicador = "";
  private string alcanceIndicador = "";
  private string formulaIndicador = "";
  private string tipoIndicador = "";
  private string unidadMedicion = "";
  private string metaIndicador = "";
  private string sentidoIndicador = "";
  private string frecuenciaIndicador = "";
  private string articuloIndicador = "";
  private string literalIndicador = "";
  private string numeralIndicador = "";
  private string paragrafoIndicador = "";

  // Campos Consulta
  private string idIndicadorConsulta = "";
  private Dictionary<string, object>? indicadorConsultado;
  private List<Dictionary<string, object>> tipoIndicadorConsultado = new();
  private string codigoIndicadorConsulta = "";
  private string nombreIndicadorConsulta = "";
  private string objetivoIndicadorConsulta = "";
  private string alcanceIndicadorConsulta = "";
  private string formulaIndicadorConsulta = "";
  private string tipoIndicadorConsulta = "";
  private string unidadMedicionConsulta = "";
  private string metaIndicadorConsulta = "";
  private string sentidoIndicadorConsulta = "";
  private string frecuenciaIndicadorConsulta = "";
  private string articuloIndicadorConsulta = "";
  private string literalIndicadorConsulta = "";
  private string numeralIndicadorConsulta = "";
  private string paragrafoIndicadorConsulta = "";

  // Campos Editar
  private Dictionary<string, object>? indicadorParaEditar = null;
  private string idIndicadorEditar = "";
  private string codigoIndicadorEditar = "";
  private string nombreIndicadorEditar = "";
  private string objetivoIndicadorEditar = "";
  private string alcanceIndicadorEditar = "";
  private string formulaIndicadorEditar = "";
  private string tipoIndicadorEditar = "";
  private string unidadMedicionEditar = "";
  private string metaIndicadorEditar = "";
  private string sentidoIndicadorEditar = "";
  private string frecuenciaIndicadorEditar = "";
  private string articuloIndicadorEditar = "";
  private string literalIndicadorEditar = "";
  private string numeralIndicadorEditar = "";
  private string paragrafoIndicadorEditar = "";

/* Codigo Nuevo*/
private void OnFuentesChanged(ChangeEventArgs e)
{
    fuentesSeleccionadas = ParseMultipleSelect(e).ToList();
}

private void OnResponsablesChanged(ChangeEventArgs e)
{
    responsablesSeleccionados = ParseMultipleSelect(e).ToList();
}

private void OnVariablesChanged(ChangeEventArgs e)
{
    variablesSeleccionadas = ParseMultipleSelect(e).ToList();
}

private void OnVisualesChanged(ChangeEventArgs e)
{
    visualesSeleccionados = ParseMultipleSelect(e).ToList();
}

/// <summary>
/// Extrae un IEnumerable<string> de e.Value cuando el <select> es multiple.
/// Blazor en WebAssembly provee un object[] de strings.
/// </summary>
private IEnumerable<string> ParseMultipleSelect(ChangeEventArgs e)
{
    if (e.Value is string single)
    {
        // Por si acaso llega un solo valor
        return new[] { single };
    }
    else if (e.Value is IEnumerable<object> list)
    {
        // Ese array de objetos son tus string ids
        return list.Select(x => x?.ToString() ?? "");
    }
    return Enumerable.Empty<string>();
}

/*FIN CODIGO NUEVO*/

  protected override async Task OnInitializedAsync()
  {
    await CargarIndicadores();
    await CargarTipoIndicadores();
    await CargarFrecuenciaIndicadores();
    await CargarUnidadMediciones();
    await CargarSentidos();
    await CargarArticulos();
    await CargarLiterales();
    await CargarNumerales();
    await CargarParagrafos();
    // Carga de nuevos catálogos
    await CargarFuentes();
    await CargarResponsables();
    await CargarVariables();
    await CargarVisuales();
  }

  private async Task CargarTipoIndicadores()
  {
    tipoIndicadores = await servicioEntidad.ObtenerTodosAsync("proyecto","tipoindicador") ?? new();
  }
  private async Task CargarFrecuenciaIndicadores()
  {
    frecuenciaIndicadores = await servicioEntidad.ObtenerTodosAsync("proyecto","frecuencia") ?? new();
  }
  private async Task CargarUnidadMediciones()
  {
    unidadMediciones = await servicioEntidad.ObtenerTodosAsync("proyecto","unidadmedicion") ?? new();
  }
  private async Task CargarSentidos()
  {
    sentidos = await servicioEntidad.ObtenerTodosAsync("proyecto","sentido") ?? new();
  }
  private async Task CargarArticulos()
  {
    articuloIndicadores = await servicioEntidad.ObtenerTodosAsync("proyecto","articulo") ?? new();
  }
  private async Task CargarLiterales()
  {
    literalIndicadores = await servicioEntidad.ObtenerTodosAsync("proyecto","literal") ?? new();
  }
  private async Task CargarNumerales()
  {
    numeralIndicadores = await servicioEntidad.ObtenerTodosAsync("proyecto","numeral") ?? new();
  }
   private async Task CargarParagrafos()
  {
    paragrafoIndicadores = await servicioEntidad.ObtenerTodosAsync("proyecto","paragrafo") ?? new();
  }
  // Campos Nuevos
  private async Task CargarFuentes()
    => fuentes = await servicioEntidad.ObtenerTodosAsync("proyecto","fuente") ?? new();
  private async Task CargarResponsables()
    => responsables = await servicioEntidad.ObtenerTodosAsync("proyecto","actor") ?? new();
  private async Task CargarVariables()
    => variables = await servicioEntidad.ObtenerTodosAsync("proyecto","variable") ?? new();
  private async Task CargarVisuales()
    => visuales = await servicioEntidad.ObtenerTodosAsync("proyecto","represenvisual") ?? new();
    
  private async Task CargarIndicadores()  
  {
    cargando = true;
    try
    {
      var res = await servicioEntidad.ObtenerTodosAsync("Indicadores", "indicador");
      indicadores = res ?? new();
      indicadorSeleccionado = indicadores.ToDictionary(i => i, i => false);
    }
    catch (Exception ex)
    {
      errorMensaje = $"Error al cargar indicadores: {ex.Message}";
      indicadores = new();
    }
    finally
    {
      cargando = false;
    }
  }
  private void AbrirModal()
  {
    mostrarModalAgregar = true;
    errorMensaje = null;
    idIndicador = codigoIndicador = nombreIndicador =
    objetivoIndicador = alcanceIndicador = formulaIndicador =
    tipoIndicador = unidadMedicion = metaIndicador =
    sentidoIndicador = frecuenciaIndicador = articuloIndicador =
    literalIndicador = numeralIndicador = paragrafoIndicador = "";
    // Nuevo Codigo
  fuentesSeleccionadas.Clear();
  responsablesSeleccionados.Clear();
  variablesSeleccionadas.Clear();
  visualesSeleccionados.Clear();
  }
  private void CerrarModal() => mostrarModalAgregar = false;

private async Task GuardarIndicador()
{
    try
    {
        // 1) Armas los parámetros para el SP de agregar
        var nuevo = new Dictionary<string, object>
        {
            ["nombreSP"]            = "agregarIndicador",
            ["codigo"]              = codigoIndicador,
            ["nombre"]              = nombreIndicador,
            ["objetivo"]            = objetivoIndicador,
            ["alcance"]             = alcanceIndicador,
            ["formula"]             = formulaIndicador,
            ["fkidtipoindicador"]   = tipoIndicador,
            ["fkidunidadmedicion"]  = unidadMedicion,
            ["meta"]                = metaIndicador,
            ["fkidsentido"]         = sentidoIndicador,
            ["fkidfrecuencia"]      = frecuenciaIndicador,
            ["fkidarticulo"]        = articuloIndicador,
            ["fkidliteral"]         = literalIndicador,
            ["fkidnumeral"]         = numeralIndicador,
            ["fkidparagrafo"]       = paragrafoIndicador,

              // convierto las listas en CSV
             ["Fuentes"]           = string.Join(",", fuentesSeleccionadas),
             ["Responsables"]      = string.Join(",", responsablesSeleccionados),
             ["Variables"]         = string.Join(",", variablesSeleccionadas),
             ["Visuales"]          = string.Join(",", visualesSeleccionados),
             ["EmailUsuario"]   = currentUserEmail 
        };
         // 2) Llamas al SP que inserta el indicador
        await servicioEntidad.EjecutarProcedimientoAsync(
            "Indicadores", "indicador", "agregarIndicador", nuevo);

        // 3) Recuperas el registro que acabas de insertar
        var creado = await servicioEntidad.ObtenerPorClaveAsync(
            "Indicadores",   // base de datos/controlador
            "indicador",     // tabla
            "codigo",        // columna clave
            codigoIndicador  // valor que acabas de insertar
        );

        if (creado == null)
            throw new Exception("No se pudo recuperar el indicador recién agregado.");

        // 4) Lees el ID del diccionario
        var nuevoId = int.Parse( ObtenerValor(creado, "id") );


        // 5) Ahora insertas en las tablas intermedias
        foreach (var f in fuentesSeleccionadas)
        {
            await servicioEntidad.EjecutarProcedimientoAsync(
                "Indicadores","fuentesporindicador","agregarFuentePorIndicador",
                new Dictionary<string, object>
                {
                    ["fkidindicador"] = nuevoId,
                    ["fkidfuente"]    = f
                });
        }
        foreach (var r in responsablesSeleccionados)
        {
            await servicioEntidad.EjecutarProcedimientoAsync(
                "Indicadores","responsablesporindicador","agregarResponsablePorIndicador",
                new Dictionary<string, object>
                {
                    ["fkidindicador"]   = nuevoId,
                    ["fkidresponsable"] = r
                });
        }
        foreach (var v in variablesSeleccionadas)
        {
            await servicioEntidad.EjecutarProcedimientoAsync(
                "Indicadores","variablesporindicador","agregarVariablePorIndicador",
                new Dictionary<string, object>
                {
                    ["fkidindicador"] = nuevoId,
                    ["fkidvariable"]  = v,
//                    ["dato"]          = 0.0,
//                    ["fkemailusuario"]  = usuarioActualCorreo,
//                    ["fechadato"]       = DateTime.Now
                });
        }
        foreach (var vis in visualesSeleccionados)
        {
            await servicioEntidad.EjecutarProcedimientoAsync(
                "Indicadores","represenvisualporindicador","agregarVisualPorIndicador",
                new Dictionary<string, object>
                {
                    ["fkidindicador"]       = nuevoId,
                    ["fkidrepresenvisual"] = vis
                });
        }

        // 6) Refrescas la grilla y cierras el modal
        await CargarIndicadores();
        CerrarModal();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error al guardar Indicador: {ex.Message}");
        errorMensaje = ex.Message;
    }       
}
  
  private async Task ConsultarIndicador()
  {
    if (string.IsNullOrWhiteSpace(idIndicadorConsulta)) return;
    var resultado = await servicioEntidad.ObtenerPorClaveAsync("Indicadores", "indicador", "id", idIndicadorConsulta);
    if (resultado != null)
    {
      indicadorConsultado = resultado;
      codigoIndicadorConsulta = ObtenerValor(resultado, "codigo");
      nombreIndicadorConsulta = ObtenerValor(resultado, "nombre");
      objetivoIndicadorConsulta = ObtenerValor(resultado, "objetivo");
      alcanceIndicadorConsulta = ObtenerValor(resultado, "alcance");
      formulaIndicadorConsulta = ObtenerValor(resultado, "formula");
      tipoIndicadorConsulta = ObtenerValor(resultado, "fkidtipoindicador");
      unidadMedicionConsulta = ObtenerValor(resultado, "fkidunidadmedicion");
      metaIndicadorConsulta = ObtenerValor(resultado, "meta");
      sentidoIndicadorConsulta = ObtenerValor(resultado, "fkidsentido");
      frecuenciaIndicadorConsulta = ObtenerValor(resultado, "fkidfrecuencia");
      articuloIndicadorConsulta = ObtenerValor(resultado, "fkidarticulo");
      literalIndicadorConsulta = ObtenerValor(resultado, "fkidliteral");
      numeralIndicadorConsulta = ObtenerValor(resultado, "fkidnumeral");
      paragrafoIndicadorConsulta = ObtenerValor(resultado, "fkidparagrafo");

      //Consultar valores asociados
//      tipoIndicadorConsultado = await servicioEntidad.ObtenerTodosAsync("proyecto",
//      $"responsablesporindicador/fkidindicador/{idIndicadorConsulta}") ?? new();
//    }
//    else
//    {
//      idIndicadorConsulta = null;
//      tipoIndicadorConsultado.Clear();
    }
  }

  private void CerrarModalConsulta()
  {
    mostrarModalConsulta = false;
    indicadorConsultado = null;
  }

  private async Task EditarIndicador(Dictionary<string, object> indicador)
{
    indicadorParaEditar = indicador;
    idIndicadorEditar        = ObtenerValor(indicador, "id");
    codigoIndicadorEditar    = ObtenerValor(indicador, "codigo");
    nombreIndicadorEditar    = ObtenerValor(indicador, "nombre");
    objetivoIndicadorEditar  = ObtenerValor(indicador, "objetivo");
    alcanceIndicadorEditar   = ObtenerValor(indicador, "alcance");
    formulaIndicadorEditar   = ObtenerValor(indicador, "formula");
    tipoIndicadorEditar      = ObtenerValor(indicador, "fkidtipoindicador");
    unidadMedicionEditar     = ObtenerValor(indicador, "fkidunidadmedicion");
    metaIndicadorEditar      = ObtenerValor(indicador, "meta");
    sentidoIndicadorEditar   = ObtenerValor(indicador, "fkidsentido");
    frecuenciaIndicadorEditar= ObtenerValor(indicador, "fkidfrecuencia");
    articuloIndicadorEditar  = ObtenerValor(indicador, "fkidarticulo");
    literalIndicadorEditar   = ObtenerValor(indicador, "fkidliteral");
    numeralIndicadorEditar   = ObtenerValor(indicador, "fkidnumeral");
    paragrafoIndicadorEditar = ObtenerValor(indicador, "fkidparagrafo");

    // 2) cargar actualmente seleccionados de cada relación:
    fuentesSeleccionadas = (await servicioEntidad
        .ObtenerTodosAsync("Indicadores",
          $"fuentesporindicador/fkidindicador/{idIndicadorEditar}"))
      .Select(d => ObtenerValor(d, "fkidfuente")).ToList();

    responsablesSeleccionados = (await servicioEntidad
        .ObtenerTodosAsync("Indicadores",
          $"responsablesporindicador/fkidindicador/{idIndicadorEditar}"))
      .Select(d => ObtenerValor(d, "fkidresponsable")).ToList();

    variablesSeleccionadas = (await servicioEntidad
        .ObtenerTodosAsync("Indicadores",
          $"variablesporindicador/fkidindicador/{idIndicadorEditar}"))
      .Select(d => ObtenerValor(d, "fkidvariable")).ToList();

    visualesSeleccionados = (await servicioEntidad
        .ObtenerTodosAsync("Indicadores",
          $"represenvisualporindicador/fkidindicador/{idIndicadorEditar}"))
      .Select(d => ObtenerValor(d, "fkidrepresenvisual")).ToList();

    mostrarModalEditar = true;
}

  private void EditarIndicadorSeleccionado()
  {
    var sel = indicadorSeleccionado.FirstOrDefault(x => x.Value).Key;
    if (sel != null) EditarIndicador(sel);
  }

  private void CerrarModalEditar() => mostrarModalEditar = false;

  private async Task ActualizarIndicador()
  {
    //if (indicadorParaEditar == null) return;
    var actualizados = new Dictionary<string, object>
    {
          // 1) Clave primaria y campos básicos
          ["Id"]                  = idIndicadorEditar,
          ["codigo"]              = codigoIndicadorEditar,
          ["nombre"]              = nombreIndicadorEditar,
          ["objetivo"]            = objetivoIndicadorEditar,
          ["alcance"]             = alcanceIndicadorEditar,
          ["formula"]             = formulaIndicadorEditar,
          ["meta"]                = metaIndicadorEditar,

          // 2) FKs con el nombre EXACTO del SP
          ["fkidtipoindicador"]   = tipoIndicadorEditar,
          ["fkidunidadmedicion"]  = unidadMedicionEditar,
          ["fkidsentido"]         = sentidoIndicadorEditar,
          ["fkidfrecuencia"]      = frecuenciaIndicadorEditar,
          ["fkidarticulo"]        = articuloIndicadorEditar,
          ["fkidliteral"]         = literalIndicadorEditar,
          ["fkidnumeral"]         = numeralIndicadorEditar,
          ["fkidparagrafo"]       = paragrafoIndicadorEditar,

          // 3) Nuevas relaciones como CSV
          ["Fuentes"]             = string.Join(",", fuentesSeleccionadas),
          ["Responsables"]        = string.Join(",", responsablesSeleccionados),
          ["Variables"]           = string.Join(",", variablesSeleccionadas),
          ["Visuales"]            = string.Join(",", visualesSeleccionados),

          // 4) Usuario para las tablas intermedias
          ["EmailUsuario"]        = currentUserEmail
    };

    await servicioEntidad.EjecutarProcedimientoAsync("Indicadores", "indicador", "actualizarIndicador",actualizados);
    {
      await CargarIndicadores();
      CerrarModalEditar();
    }
  }

  private void MostrarModalEliminarMultiples()
  {
    if (!indicadorSeleccionado.Any(x => x.Value))
    {
      errorMensaje = "Seleccione al menos un indicador.";
      return;
    }
    mostrarModalEliminarMultiples = true;
  }

  private void CerrarModalEliminarMultiples() => mostrarModalEliminarMultiples = false;

  private async Task ConfirmarEliminarSeleccionados()
  {
    var sel = indicadorSeleccionado.Where(x => x.Value).Select(x => x.Key).ToList();
    foreach (var ind in sel)
    {
      var id = ObtenerValor(ind, "id");
      await servicioEntidad.EjecutarProcedimientoAsync("Indicadores", "indicador", "eliminarIndicador",
      new Dictionary<string, object>{
        ["Id"] = id
      });
      {
        indicadores.Remove(ind);
        indicadorSeleccionado.Remove(ind);
      }
    }
    seleccionarTodos = false;
    CerrarModalEliminarMultiples();
  }

  private Dictionary<string, object>? indicadorParaEliminar;
  private void EliminarIndicador(Dictionary<string, object> ind)
  {
    indicadorParaEliminar = ind;
    mostrarModalEliminar = true;
  }

  private void CerrarModalEliminar() => mostrarModalEliminar = false;

  private async Task ConfirmarEliminarIndicador()
  {
    if (indicadorParaEliminar == null) return;
    var id = ObtenerValor(indicadorParaEliminar, "id");
    await servicioEntidad.EjecutarProcedimientoAsync(
      "Indicadores", "indicador", "eliminarIndicador",
      new Dictionary<string,object>{
        ["Id"] = id
      });
    {
      indicadores.Remove(indicadorParaEliminar);
      indicadorSeleccionado.Remove(indicadorParaEliminar);
    }
    CerrarModalEliminar();
  }

  private string ObtenerValor(Dictionary<string, object> dic, string clave)
  => dic.TryGetValue(clave, out var v) ? v?.ToString() ?? "" : "";

/*
private string ObtenerTipoIndicadorDesdeEntidad(Dictionary<string, object> entidad)
{
    if (entidad.TryGetValue("id", out var id))
    {
        var tIndicador = tipoIndicadores.FirstOrDefault(p => ObtenerValor(p, "id") == id?.ToString());
        return tIndicador != null ? ObtenerValor(tIndicador, "id") : "(sin ID)";
    }
    return "(Sin tipo Indicador)";
}
private string ObtenerFrecuenciaDesdeEntidad(Dictionary<string, object> entidad)
{
    if (entidad.TryGetValue("id", out var id))
    {
        var frecuencia = frecuenciaIndicadores.FirstOrDefault(p => ObtenerValor(p, "id") == id?.ToString());
        return frecuencia != null ? ObtenerValor(frecuencia, "nombre") : "(sin ID)";
    }
    return "(Sin Frecuencia)";
}

private string ObtenerUnidadmedicionDesdeEntidad(Dictionary<string, object> entidad)
{
    if (entidad.TryGetValue("id", out var id))
    {
        var uMedicion = unidadMediciones.FirstOrDefault(p => ObtenerValor(p, "id") == id?.ToString());
        return uMedicion != null ? ObtenerValor(uMedicion, "id") : "(sin ID)";
    }
    return "(Sin Unidad Medición)";
}
private string ObtenerSentidoDesdeEntidad(Dictionary<string, object> entidad)
{
    if (entidad.TryGetValue("id", out var id))
    {
        var sentido = sentidos.FirstOrDefault(p => ObtenerValor(p, "id") == id?.ToString());
        return sentido != null ? ObtenerValor(sentido, "id") : "(sin ID)";
    }
    return "(Sin Sentido)";
}
private string ObtenerArticuloDesdeEntidad(Dictionary<string, object> entidad)
{
    if (entidad.TryGetValue("id", out var id))
    {
        var articulo = articuloIndicadores.FirstOrDefault(p => ObtenerValor(p, "id") == id?.ToString());
        return articulo != null ? ObtenerValor(articulo, "id") : "(sin ID)";
    }
    return "(Sin Articulo)";
}
private string ObtenerLiteralDesdeEntidad(Dictionary<string, object> entidad)
{
    if (entidad.TryGetValue("id", out var id))
    {
        var literal = literalIndicadores.FirstOrDefault(p => ObtenerValor(p, "id") == id?.ToString());
        return literal != null ? ObtenerValor(literal, "id") : "(sin ID)";
    }
    return "(Sin Literal)";
}
private string ObtenerNumeralDesdeEntidad(Dictionary<string, object> entidad)
{
    if (entidad.TryGetValue("id", out var id))
    {
        var numeral = numeralIndicadores.FirstOrDefault(p => ObtenerValor(p, "id") == id?.ToString());
        return numeral != null ? ObtenerValor(numeral, "id") : "(sin ID)";
    }
    return "(Sin Numeral)";
}
private string ObtenerParagrafoDesdeEntidad(Dictionary<string, object> entidad)
{
    if (entidad.TryGetValue("id", out var id))
    {
        var paragrafo = paragrafoIndicadores.FirstOrDefault(p => ObtenerValor(p, "id") == id?.ToString());
        return paragrafo != null ? ObtenerValor(paragrafo, "id") : "(sin ID)";
    }
    return "(Sin Paragrafo)";
}
*/
}
