@page "/subseccion"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager



<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Subsecciones</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>

                    <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                        <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                    </button>

                        <button class="btn btn-success btn-sm" @onclick="AbrirModal">
                            <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                        </button>

                        <button class="btn btn-info btn-sm" @onclick="() => EditarSubseccionSeleccionado()">
                            <i class="material-icons">&#xE254;</i> <span>Editar Seleccionado</span>
                        </button>

                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (subsecciones == null || subsecciones.Count == 0)
            {
                <p>No hay Subsecciones disponibles.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>
                                <span class="custom-checkbox">
                                    <input type="checkbox" @bind="@seleccionarTodos">
                                    <label></label>
                                </span>
                            </th>
                            <th>id</th>
                            <th>nombre</th>                            
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var subseccion in subsecciones)
                        {
                            <tr>
                                <td>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@subseccionSeleccionado[subseccion]">
                                        <label></label>
                                    </span>
                                </td>
                                <td>@ObtenerValor(subseccion, "id")</td>
                                <td>@ObtenerValor(subseccion, "nombre")</td>                                
                                <td>
                                    <a href="#" class="edit" @onclick="() => EditarSubseccion(subseccion)" @onclick:preventDefault>
                                        <i class="material-icons" title="Editar">&#xE254;</i>
                                    </a>
                                <a href="#" class="delete" @onclick="() => EliminarSubseccion(subseccion)" @onclick:preventDefault>
                                    <i class="material-icons" title="Eliminar">&#xE872;</i>
                                </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModal)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="GuardarSubseccion">
                    <div class="modal-header">
                        <h4 class="modal-title">Agregar Subsecciones</h4>
                        <button type="button" class="close" @onclick="CerrarModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Id</label>
                            <input type="number" class="form-control" @bind="idSubseccion" required>
                        </div>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" @bind="nombreSubseccion" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        <button type="submit" class="btn btn-success">Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Subseccion</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Id de la Subseccion</label>
                        <input type="number" class="form-control" @bind="idSubseccionConsulta">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarSubseccion">Buscar</button>

                    @if (subseccionConsultado != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" value="@nombreSubseccionConsulta" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ActualizarSubseccion">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Subseccion</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Id</label>
                            <input type="number" class="form-control" @bind="idSubseccionEditar" disabled>
                        </div>
                        <div class="form-group">
                            <label>Nombre</label>
                            <input type="text" class="form-control" @bind="nombreSubseccionEditar" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSubseccion">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Subseccion</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro(a) de que desea eliminar este subseccion?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Subsecciones Seleccionados</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar las Subsecciones seleccionados?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}


@code {
    private List<Dictionary<string, object>> subsecciones = new List<Dictionary<string, object>>();
    private Dictionary<Dictionary<string, object>, bool> subseccionSeleccionado = new();
    private bool cargando = true;
    private string? errorMensaje = null;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var clave in subseccionSeleccionado.Keys.ToList())
            {
                subseccionSeleccionado[clave] = _seleccionarTodos;
            }
        }
    }
    private bool _seleccionarTodos = false;

    private bool mostrarModal = false;
    private string idSubseccion = "";
    @* private int idSubseccion; // Added variable declaration *@
    private string nombreSubseccion = "";    

// Variables para controlar el modal de consulta
private bool mostrarModalConsulta = false;
private string idSubseccionConsulta = "";

// Variables para mostrar los datos del subseccion consultado
private Dictionary<string, object>? subseccionConsultado = null;
private string nombreSubseccionConsulta = "";


// Variables para el modal de edición
private bool mostrarModalEditar = false;
private Dictionary<string, object>? subseccionParaEditar = null;
private int idSubseccionEditar = 0;
private string nombreSubseccionEditar = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarSubsecciones();
    }

    private async Task CargarSubsecciones()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync("proyecto", "subseccion");
            subsecciones = resultado ?? new();
            subseccionSeleccionado = subsecciones.ToDictionary(p => p, p => false);
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar subsecciones: {ex.Message}";
            subsecciones = new();
        }
        finally
        {
            cargando = false;
        }
    }

    private void AbrirModal()
    {
        mostrarModal = true;
        idSubseccion = ""; // Reiniciar el idSubseccion al abrir el modal
        nombreSubseccion = "";
    }
    private void CerrarModal()
    {
        mostrarModal = false;
    }

private async Task GuardarSubseccion()
{
    // Validar que los campos no estén vacíos
    if (string.IsNullOrEmpty(idSubseccion) || string.IsNullOrEmpty(nombreSubseccion))
    {
        errorMensaje = "El id y Nombre de la subseccion es obligatorio.";
        return;
    }
    // Crear la nueva subseccion
    var nuevaSubseccion = new Dictionary<string, object>
    {
        { "id", idSubseccion },
        { "nombre", nombreSubseccion },        
    };

    // 🔥 Llamar a la API para guardar en la base de datos
    bool resultado = await servicioEntidad.CrearAsync("proyecto", "subseccion", nuevaSubseccion);

    if (resultado)  // Si la API responde con éxito
    {
        @* subsecciones.Add(nuevaSubseccion);  // Agregarlo a la lista local
        subseccionSeleccionado[nuevaSubseccion] = false; *@
        await CargarSubsecciones();
        CerrarModal();
    }
    else
    {
        errorMensaje = "Error al guardar el subseccion en la base de datos.";
    }
}

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }
    private async Task ConsultarSubseccion()
{
    if (string.IsNullOrEmpty(idSubseccionConsulta))
    {
        errorMensaje = "Debe ingresar un código de subseccion.";
        return;
    }

    var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "subseccion", "id", idSubseccionConsulta);

    if (resultado != null)
    {
        subseccionConsultado = resultado;
        nombreSubseccionConsulta = ObtenerValor(resultado, "nombre");        
    }
    else
    {
        errorMensaje = "No se encontró el subseccion.";
        subseccionConsultado = null;
        nombreSubseccionConsulta = "";        
    }
}
private void CerrarModalConsulta()
{
    mostrarModalConsulta = false;
    idSubseccionConsulta = "";
    subseccionConsultado = null;
    nombreSubseccionConsulta = "";    
}
private void EditarSubseccion(Dictionary<string, object> subseccion)
{
    subseccionParaEditar = subseccion;
    
    // Cargar datos del subseccion en el formulario de edición
    idSubseccionEditar = int.TryParse(ObtenerValor(subseccion, "id"), out int id) ? id : 0; 
    nombreSubseccionEditar = ObtenerValor(subseccion, "nombre");
    mostrarModalEditar = true;
}

private void CerrarModalEditar()
{
    mostrarModalEditar = false;
    subseccionParaEditar = null;
}

private async Task ActualizarSubseccion()
{
    if (subseccionParaEditar == null || string.IsNullOrEmpty(nombreSubseccionEditar))
    {
        errorMensaje = "El nombre de la subseccion es obligatorio.";
        return;
    }

    var datosSubseccionActualizado = new Dictionary<string, object>
    {
        @* { "id", idSubseccionEditar }, *@
        { "nombre", nombreSubseccionEditar },        
    };

    // Actualizar el subseccion en la base de datos
    bool resultado = await servicioEntidad.ActualizarAsync(
        "proyecto", 
        "subseccion", 
        "id", 
        idSubseccionEditar.ToString(), 
        datosSubseccionActualizado);

    if (resultado)
    {
        // Actualizar el subseccion en la lista local
        @* int indice = subsecciones.IndexOf(subseccionParaEditar);
        if (indice >= 0) *@
        
        
            @* subsecciones[indice] = datosSubseccionActualizado;
            subseccionSeleccionado.Remove(subseccionParaEditar);
            subseccionSeleccionado[datosSubseccionActualizado] = false; *@
            await CargarSubsecciones();
            CerrarModalEditar();
        
        @* CerrarModalEditar(); *@
    }
    else
    {
        errorMensaje = "Error al actualizar la Subsección en la base de datos.";
    }
}
private void EditarSubseccionSeleccionado()
{
    var seleccionado = subseccionSeleccionado.FirstOrDefault(x => x.Value).Key;
    if (seleccionado != null)
    {
        EditarSubseccion(seleccionado);
    }
    else
    {
        errorMensaje = "Debe seleccionar una la Subsección para editar.";
    }
}
// Variables para el modal de eliminación
private bool mostrarModalEliminar = false;
private Dictionary<string, object>? subseccionParaEliminar = null;

private void EliminarSubseccion(Dictionary<string, object> subseccion)
{
    subseccionParaEliminar = subseccion;
    mostrarModalEliminar = true;
}

private void CerrarModalEliminar()
{
    mostrarModalEliminar = false;
    subseccionParaEliminar = null;
}

private async Task ConfirmarEliminarSubseccion()
{
    if (subseccionParaEliminar != null)
    {
        string id = ObtenerValor(subseccionParaEliminar, "id");
        
        // Eliminar de la base de datos
        bool resultado = await servicioEntidad.EliminarAsync(
            "proyecto", 
            "subseccion", 
            "id", 
            id);
            
        if (resultado)
        {
            // Eliminar de la lista local
            subsecciones.Remove(subseccionParaEliminar);
            subseccionSeleccionado.Remove(subseccionParaEliminar);
        }
        else
        {
            errorMensaje = "Error al eliminar el tipo Actor de la base de datos.";
        }
        
        CerrarModalEliminar();
    }
}
private async Task EliminarSeleccionados()
{
    var seleccionados = subseccionSeleccionado.Where(x => x.Value).Select(x => x.Key).ToList();
    
    foreach (var subseccion in seleccionados)
    {
        string id = ObtenerValor(subseccion, "id");
        bool resultado = await servicioEntidad.EliminarAsync(
            "proyecto", 
            "subseccion", 
            "id", 
            id);
            
        if (resultado)
        {
            subsecciones.Remove(subseccion);
            subseccionSeleccionado.Remove(subseccion);
        }
    }
    
    seleccionarTodos = false;
}
// Variables para el modal de eliminación múltiple
private bool mostrarModalEliminarMultiples = false;

private void MostrarModalEliminarMultiples()
{
    // Verificar si hay subsecciones seleccionados
    var haySeleccionados = subseccionSeleccionado.Any(x => x.Value);
    if (!haySeleccionados)
    {
        errorMensaje = "Debe seleccionar al menos una subseccion para eliminar.";
        return;
    }
    
    mostrarModalEliminarMultiples = true;
}

private void CerrarModalEliminarMultiples()
{
    mostrarModalEliminarMultiples = false;
}

private async Task ConfirmarEliminarSeleccionados()
{
    await EliminarSeleccionados();
    CerrarModalEliminarMultiples();
}
}
