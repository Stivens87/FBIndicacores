@page "/usuario"
@using System.Collections.Generic
@using System.Threading.Tasks
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager



<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Administrar <b>Usuarios</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <button class="btn btn-info btn-sm" @onclick="() => mostrarModalConsulta = true">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </button>

                    <button class="btn btn-danger btn-sm" @onclick="MostrarModalEliminarMultiples">
                        <i class="material-icons">&#xE15C;</i> <span>Eliminar</span>
                    </button>

                        <button class="btn btn-success btn-sm" @onclick="AbrirModal">
                            <i class="material-icons">&#xE147;</i> <span>Agregar</span>
                        </button>

                        <button class="btn btn-info btn-sm" @onclick="() => EditarUsuarioSeleccionado()">
                            <i class="material-icons">&#xE254;</i> <span>Editar Seleccionado</span>
                        </button>

                    </div>
                </div>
            </div>

            @if (cargando)
            {
                <p><em>Cargando...</em></p>
            }
            else if (usuarios == null || usuarios.Count == 0)
            {
                <p>No hay Usuarios disponibles.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>
                                <span class="custom-checkbox">
                                    <input type="checkbox" @bind="@seleccionarTodos">
                                    <label></label>
                                </span>
                            </th>
                            <th>email</th>
                            <th>contrasena</th>                            
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var usuario in usuarios)
                        {
                            <tr>
                                <td>
                                    <span class="custom-checkbox">
                                        <input type="checkbox" @bind="@usuarioSeleccionado[usuario]">
                                        <label></label>
                                    </span>
                                </td>
                                <td>@ObtenerValor(usuario, "email")</td>
                                <td>@ObtenerValor(usuario, "contrasena")</td>                                
                                <td>
                                    <a href="#" class="edit" @onclick="() => EditarUsuario(usuario)" @onclick:preventDefault>
                                        <i class="material-icons" title="Editar">&#xE254;</i>
                                    </a>
                                <a href="#" class="delete" @onclick="() => EliminarUsuario(usuario)" @onclick:preventDefault>
                                    <i class="material-icons" title="Eliminar">&#xE872;</i>
                                </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (mostrarModal)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="GuardarUsuario">
                    <div class="modal-header">
                        <h4 class="modal-title">Agregar Usuarios</h4>
                        <button type="button" class="close" @onclick="CerrarModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Email</label>
                            <input type="text" class="form-control" @bind="emailUsuario" required>
                        </div>
                        <div class="form-group">
                            <label>Contrasena</label>
                            <input type="text" class="form-control" @bind="contrasenaUsuario" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                        <button type="submit" class="btn btn-success">Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalConsulta)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consultar Usuario</h4>
                    <button type="button" class="close" @onclick="CerrarModalConsulta">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Email de la Usuario</label>
                        <input type="text" class="form-control" @bind="emailUsuarioConsulta">
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="ConsultarUsuario">Buscar</button>

                    @if (usuarioConsultado != null)
                    {
                        <hr>
                        <div class="form-group">
                            <label>Contrasena</label>
                            <input type="text" class="form-control" value="@contrasenaUsuarioConsulta" disabled>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConsulta">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalEditar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ActualizarUsuario">
                    <div class="modal-header">
                        <h4 class="modal-title">Editar Usuario</h4>
                        <button type="button" class="close" @onclick="CerrarModalEditar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Email</label>
                            <input type="text" class="form-control" @bind="emailUsuarioEditar" disabled>
                        </div>
                        <div class="form-group">
                            <label>Contrasena</label>
                            <input type="text" class="form-control" @bind="contrasenaUsuarioEditar" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEditar">Cancelar</button>
                        <button type="submit" class="btn btn-info">Actualizar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminar)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarUsuario">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Usuario</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminar">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro(a) de que desea eliminar este usuario?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (mostrarModalEliminarMultiples)
{
    <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <form @onsubmit="ConfirmarEliminarSeleccionados">
                    <div class="modal-header">
                        <h4 class="modal-title">Eliminar Usuarios Seleccionados</h4>
                        <button type="button" class="close" @onclick="CerrarModalEliminarMultiples">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar las Usuarios seleccionados?</p>
                        <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminarMultiples">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}


@code {
    private List<Dictionary<string, object>> usuarios = new List<Dictionary<string, object>>();
    private Dictionary<Dictionary<string, object>, bool> usuarioSeleccionado = new();
    private bool cargando = true;
    private string? errorMensaje = null;

    private bool seleccionarTodos
    {
        get => _seleccionarTodos;
        set
        {
            _seleccionarTodos = value;
            foreach (var clave in usuarioSeleccionado.Keys.ToList())
            {
                usuarioSeleccionado[clave] = _seleccionarTodos;
            }
        }
    }
    private bool _seleccionarTodos = false;

    private bool mostrarModal = false;
    private string emailUsuario = "";
    @* private int emailUsuario; // Added variable declaration *@
    private string contrasenaUsuario = "";    

// Variables para controlar el modal de consulta
private bool mostrarModalConsulta = false;
private string emailUsuarioConsulta = "";

// Variables para mostrar los datos del usuario consultado
private Dictionary<string, object>? usuarioConsultado = null;
private string contrasenaUsuarioConsulta = "";


// Variables para el modal de edición
private bool mostrarModalEditar = false;
private Dictionary<string, object>? usuarioParaEditar = null;
private int emailUsuarioEditar = 0;
private string contrasenaUsuarioEditar = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
    }

    private async Task CargarUsuarios()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync("proyecto", "usuario");
            usuarios = resultado ?? new();
            usuarioSeleccionado = usuarios.ToDictionary(p => p, p => false);
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar usuarios: {ex.Message}";
            usuarios = new();
        }
        finally
        {
            cargando = false;
        }
    }

    private void AbrirModal()
    {
        mostrarModal = true;
        emailUsuario = ""; // Reiniciar el emailUsuario al abrir el modal
        contrasenaUsuario = "";
    }
    private void CerrarModal()
    {
        mostrarModal = false;
    }

private async Task GuardarUsuario()
{
    // Validar que los campos no estén vacíos
    if (string.IsNullOrEmpty(emailUsuario) || string.IsNullOrEmpty(contrasenaUsuario))
    {
        errorMensaje = "El email y Contrasena de la usuario es obligatorio.";
        return;
    }
    // Crear la nueva usuario
    var nuevaUsuario = new Dictionary<string, object>
    {
        { "email", emailUsuario },
        { "contrasena", contrasenaUsuario },        
    };

    // 🔥 Llamar a la API para guardar en la base de datos
    bool resultado = await servicioEntidad.CrearAsync("proyecto", "usuario", nuevaUsuario);

    if (resultado)  // Si la API responde con éxito
    {
        @* usuarios.Add(nuevaUsuario);  // Agregarlo a la lista local
        usuarioSeleccionado[nuevaUsuario] = false; *@
        await CargarUsuarios();
        CerrarModal();
    }
    else
    {
        errorMensaje = "Error al guardar el usuario en la base de datos.";
    }
}

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? "" : "";
    }
    private async Task ConsultarUsuario()
{
    if (string.IsNullOrEmpty(emailUsuarioConsulta))
    {
        errorMensaje = "Debe ingresar un código de usuario.";
        return;
    }

    var resultado = await servicioEntidad.ObtenerPorClaveAsync("proyecto", "usuario", "email", emailUsuarioConsulta);

    if (resultado != null)
    {
        usuarioConsultado = resultado;
        contrasenaUsuarioConsulta = ObtenerValor(resultado, "contrasena");        
    }
    else
    {
        errorMensaje = "No se encontró el usuario.";
        usuarioConsultado = null;
        contrasenaUsuarioConsulta = "";        
    }
}
private void CerrarModalConsulta()
{
    mostrarModalConsulta = false;
    emailUsuarioConsulta = "";
    usuarioConsultado = null;
    contrasenaUsuarioConsulta = "";    
}
private void EditarUsuario(Dictionary<string, object> usuario)
{
    usuarioParaEditar = usuario;
    
    // Cargar datos del usuario en el formulario de edición
    emailUsuarioEditar = int.TryParse(ObtenerValor(usuario, "email"), out int email) ? email : 0; 
    contrasenaUsuarioEditar = ObtenerValor(usuario, "contrasena");
    mostrarModalEditar = true;
}

private void CerrarModalEditar()
{
    mostrarModalEditar = false;
    usuarioParaEditar = null;
}

private async Task ActualizarUsuario()
{
    if (usuarioParaEditar == null || string.IsNullOrEmpty(contrasenaUsuarioEditar))
    {
        errorMensaje = "El contrasena de la usuario es obligatorio.";
        return;
    }

    var datosUsuarioActualizado = new Dictionary<string, object>
    {
        @* { "email", emailUsuarioEditar }, *@
        { "contrasena", contrasenaUsuarioEditar },        
    };

    // Actualizar el usuario en la base de datos
    bool resultado = await servicioEntidad.ActualizarAsync(
        "proyecto", 
        "usuario", 
        "email", 
        emailUsuarioEditar.ToString(), 
        datosUsuarioActualizado);

    if (resultado)
    {
        // Actualizar el usuario en la lista local
        @* int indice = usuarios.IndexOf(usuarioParaEditar);
        if (indice >= 0) *@
        
        
            @* usuarios[indice] = datosUsuarioActualizado;
            usuarioSeleccionado.Remove(usuarioParaEditar);
            usuarioSeleccionado[datosUsuarioActualizado] = false; *@
            await CargarUsuarios();
            CerrarModalEditar();
        
        @* CerrarModalEditar(); *@
    }
    else
    {
        errorMensaje = "Error al actualizar la Sección en la base de datos.";
    }
}
private void EditarUsuarioSeleccionado()
{
    var seleccionado = usuarioSeleccionado.FirstOrDefault(x => x.Value).Key;
    if (seleccionado != null)
    {
        EditarUsuario(seleccionado);
    }
    else
    {
        errorMensaje = "Debe seleccionar una la Sección para editar.";
    }
}
// Variables para el modal de eliminación
private bool mostrarModalEliminar = false;
private Dictionary<string, object>? usuarioParaEliminar = null;

private void EliminarUsuario(Dictionary<string, object> usuario)
{
    usuarioParaEliminar = usuario;
    mostrarModalEliminar = true;
}

private void CerrarModalEliminar()
{
    mostrarModalEliminar = false;
    usuarioParaEliminar = null;
}

private async Task ConfirmarEliminarUsuario()
{
    if (usuarioParaEliminar != null)
    {
        string email = ObtenerValor(usuarioParaEliminar, "email");
        
        // Eliminar de la base de datos
        bool resultado = await servicioEntidad.EliminarAsync(
            "proyecto", 
            "usuario", 
            "email", 
            email);
            
        if (resultado)
        {
            // Eliminar de la lista local
            usuarios.Remove(usuarioParaEliminar);
            usuarioSeleccionado.Remove(usuarioParaEliminar);
        }
        else
        {
            errorMensaje = "Error al eliminar el tipo Actor de la base de datos.";
        }
        
        CerrarModalEliminar();
    }
}
private async Task EliminarSeleccionados()
{
    var seleccionados = usuarioSeleccionado.Where(x => x.Value).Select(x => x.Key).ToList();
    
    foreach (var usuario in seleccionados)
    {
        string email = ObtenerValor(usuario, "email");
        bool resultado = await servicioEntidad.EliminarAsync(
            "proyecto", 
            "usuario", 
            "email", 
            email);
            
        if (resultado)
        {
            usuarios.Remove(usuario);
            usuarioSeleccionado.Remove(usuario);
        }
    }
    
    seleccionarTodos = false;
}
// Variables para el modal de eliminación múltiple
private bool mostrarModalEliminarMultiples = false;

private void MostrarModalEliminarMultiples()
{
    // Verificar si hay usuarios seleccionados
    var haySeleccionados = usuarioSeleccionado.Any(x => x.Value);
    if (!haySeleccionados)
    {
        errorMensaje = "Debe seleccionar al menos una usuario para eliminar.";
        return;
    }
    
    mostrarModalEliminarMultiples = true;
}

private void CerrarModalEliminarMultiples()
{
    mostrarModalEliminarMultiples = false;
}

private async Task ConfirmarEliminarSeleccionados()
{
    await EliminarSeleccionados();
    CerrarModalEliminarMultiples();
}
}
